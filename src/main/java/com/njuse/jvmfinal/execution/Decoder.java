package com.njuse.jvmfinal.execution;

import com.njuse.jvmfinal.instructions.base.Instruction;
import com.njuse.jvmfinal.instructions.base.*;
import com.njuse.jvmfinal.instructions.constLoad.*;
import com.njuse.jvmfinal.instructions.constLoad.ACONST_NULL;
import com.njuse.jvmfinal.instructions.constLoad.BIPUSH;
import com.njuse.jvmfinal.instructions.constLoad.LDC;
import com.njuse.jvmfinal.instructions.constLoad.LDC2_W;
import com.njuse.jvmfinal.instructions.constLoad.LDC_W;
import com.njuse.jvmfinal.instructions.constLoad.SIPUSH;
import com.njuse.jvmfinal.instructions.control.*;
import com.njuse.jvmfinal.instructions.control.GOTO;
import com.njuse.jvmfinal.instructions.control.IFEQ;
import com.njuse.jvmfinal.instructions.control.IFGE;
import com.njuse.jvmfinal.instructions.control.IFGT;
import com.njuse.jvmfinal.instructions.control.IFLE;
import com.njuse.jvmfinal.instructions.control.IFLT;
import com.njuse.jvmfinal.instructions.control.IFNE;
import com.njuse.jvmfinal.instructions.control.IFNONNULL;
import com.njuse.jvmfinal.instructions.control.IFNULL;
import com.njuse.jvmfinal.instructions.control.IF_ICMPEQ;
import com.njuse.jvmfinal.instructions.control.IF_ICMPGE;
import com.njuse.jvmfinal.instructions.control.IF_ICMPGT;
import com.njuse.jvmfinal.instructions.control.IF_ICMPLE;
import com.njuse.jvmfinal.instructions.control.IF_ICMPLT;
import com.njuse.jvmfinal.instructions.control.IF_ICMPNE;
import com.njuse.jvmfinal.instructions.conversion.*;
import com.njuse.jvmfinal.instructions.conversion.D2F;
import com.njuse.jvmfinal.instructions.conversion.D2I;
import com.njuse.jvmfinal.instructions.conversion.D2L;
import com.njuse.jvmfinal.instructions.conversion.F2D;
import com.njuse.jvmfinal.instructions.conversion.F2I;
import com.njuse.jvmfinal.instructions.conversion.F2L;
import com.njuse.jvmfinal.instructions.conversion.I2B;
import com.njuse.jvmfinal.instructions.conversion.I2C;
import com.njuse.jvmfinal.instructions.conversion.I2D;
import com.njuse.jvmfinal.instructions.conversion.I2F;
import com.njuse.jvmfinal.instructions.conversion.I2L;
import com.njuse.jvmfinal.instructions.conversion.I2S;
import com.njuse.jvmfinal.instructions.conversion.L2D;
import com.njuse.jvmfinal.instructions.conversion.L2F;
import com.njuse.jvmfinal.instructions.conversion.L2I;
import com.njuse.jvmfinal.instructions.invoke.*;
import com.njuse.jvmfinal.instructions.invoke.ARETURN;
import com.njuse.jvmfinal.instructions.invoke.DRETURN;
import com.njuse.jvmfinal.instructions.invoke.FRETURN;
import com.njuse.jvmfinal.instructions.invoke.INVOKEINTERFACE;
import com.njuse.jvmfinal.instructions.invoke.INVOKESPECIAL;
import com.njuse.jvmfinal.instructions.invoke.INVOKESTATIC;
import com.njuse.jvmfinal.instructions.invoke.INVOKEVIRTUAL;
import com.njuse.jvmfinal.instructions.invoke.IRETURN;
import com.njuse.jvmfinal.instructions.invoke.LRETURN;
import com.njuse.jvmfinal.instructions.invoke.RETURN;
import com.njuse.jvmfinal.instructions.load.*;
import com.njuse.jvmfinal.instructions.load.ALOAD;
import com.njuse.jvmfinal.instructions.load.DLOAD;
import com.njuse.jvmfinal.instructions.load.FLOAD;
import com.njuse.jvmfinal.instructions.load.ILOAD;
import com.njuse.jvmfinal.instructions.load.LLOAD;
import com.njuse.jvmfinal.instructions.math.algorithm.*;
import com.njuse.jvmfinal.instructions.math.algorithm.DADD;
import com.njuse.jvmfinal.instructions.math.algorithm.FADD;
import com.njuse.jvmfinal.instructions.math.algorithm.IADD;
import com.njuse.jvmfinal.instructions.math.algorithm.IDIV;
import com.njuse.jvmfinal.instructions.math.algorithm.IINC;
import com.njuse.jvmfinal.instructions.math.algorithm.IMUL;
import com.njuse.jvmfinal.instructions.math.algorithm.INEG;
import com.njuse.jvmfinal.instructions.math.algorithm.IREM;
import com.njuse.jvmfinal.instructions.math.algorithm.ISHL;
import com.njuse.jvmfinal.instructions.math.algorithm.ISUB;
import com.njuse.jvmfinal.instructions.math.algorithm.IXOR;
import com.njuse.jvmfinal.instructions.math.algorithm.LADD;
import com.njuse.jvmfinal.instructions.math.comparison.*;
import com.njuse.jvmfinal.instructions.math.comparison.DCMPG;
import com.njuse.jvmfinal.instructions.math.comparison.DCMPL;
import com.njuse.jvmfinal.instructions.math.comparison.FCMPG;
import com.njuse.jvmfinal.instructions.math.comparison.FCMPL;
import com.njuse.jvmfinal.instructions.math.comparison.LCMP;
import com.njuse.jvmfinal.instructions.operand.*;
import com.njuse.jvmfinal.instructions.operand.DUP;
import com.njuse.jvmfinal.instructions.operand.NOP;
import com.njuse.jvmfinal.instructions.operand.POP;
import com.njuse.jvmfinal.instructions.operand.POP2;
import com.njuse.jvmfinal.instructions.references.*;
import com.njuse.jvmfinal.instructions.references.AALOAD;
import com.njuse.jvmfinal.instructions.references.AASTORE;
import com.njuse.jvmfinal.instructions.references.ANEWARRAY;
import com.njuse.jvmfinal.instructions.references.ARRAYLENGTH;
import com.njuse.jvmfinal.instructions.references.BALOAD;
import com.njuse.jvmfinal.instructions.references.BASTORE;
import com.njuse.jvmfinal.instructions.references.CALOAD;
import com.njuse.jvmfinal.instructions.references.CASTORE;
import com.njuse.jvmfinal.instructions.references.GETFIELD;
import com.njuse.jvmfinal.instructions.references.GETSTATIC;
import com.njuse.jvmfinal.instructions.references.IALOAD;
import com.njuse.jvmfinal.instructions.references.IASTORE;
import com.njuse.jvmfinal.instructions.references.INSTANCEOF;
import com.njuse.jvmfinal.instructions.references.MULTIANEWARRAY;
import com.njuse.jvmfinal.instructions.references.NEW;
import com.njuse.jvmfinal.instructions.references.NEWARRAY;
import com.njuse.jvmfinal.instructions.references.PUTFIELD;
import com.njuse.jvmfinal.instructions.references.PUTSTATIC;
import com.njuse.jvmfinal.instructions.store.*;
import com.njuse.jvmfinal.instructions.store.ASTORE;
import com.njuse.jvmfinal.instructions.store.DSTORE;
import com.njuse.jvmfinal.instructions.store.FSTORE;
import com.njuse.jvmfinal.instructions.store.ISTORE;
import com.njuse.jvmfinal.instructions.store.LSTORE;


import java.util.HashMap;

public class Decoder {
    private static HashMap<Integer, Instruction> opcodeMap = new HashMap<>();

    static {
        opcodeMap.put(0, new NOP());
        opcodeMap.put(1, new ACONST_NULL());
        opcodeMap.put(2, new ICONST_I(-1));
        opcodeMap.put(3, new ICONST_I(0));
        opcodeMap.put(4, new ICONST_I(1));
        opcodeMap.put(5, new ICONST_I(2));
        opcodeMap.put(6, new ICONST_I(3));
        opcodeMap.put(7, new ICONST_I(4));
        opcodeMap.put(8, new ICONST_I(5));
        opcodeMap.put(9, new LCONST_L(0));
        opcodeMap.put(16, new BIPUSH());
        opcodeMap.put(17, new SIPUSH());
        opcodeMap.put(18, new LDC());
        opcodeMap.put(19, new LDC_W());
        opcodeMap.put(20, new LDC2_W());
        opcodeMap.put(21, new ILOAD());
        opcodeMap.put(22, new LLOAD());
        opcodeMap.put(23, new FLOAD());
        opcodeMap.put(24, new DLOAD());
        opcodeMap.put(25, new ALOAD());
        opcodeMap.put(32, new LLOAD_N(2));
        opcodeMap.put(33, new LLOAD_N(3));
        opcodeMap.put(34, new FLOAD_N(0));
        opcodeMap.put(35, new FLOAD_N(1));
        opcodeMap.put(36, new FLOAD_N(2));
        opcodeMap.put(37, new FLOAD_N(3));
        opcodeMap.put(38, new DLOAD_N(0));
        opcodeMap.put(39, new DLOAD_N(1));
        opcodeMap.put(40, new DLOAD_N(2));
        opcodeMap.put(41, new DLOAD_N(3));
//        opcodeMap.put(48, new FALOAD());
//        opcodeMap.put(49, new DALOAD());
        opcodeMap.put(50, new AALOAD());
        opcodeMap.put(51, new BALOAD());
        opcodeMap.put(52, new CALOAD());
//        opcodeMap.put(53, new SALOAD());
        opcodeMap.put(54, new ISTORE());
        opcodeMap.put(55, new LSTORE());
        opcodeMap.put(56, new FSTORE());
        opcodeMap.put(57, new DSTORE());
        opcodeMap.put(64, new LSTORE_N(1));
        opcodeMap.put(65, new LSTORE_N(2));
        opcodeMap.put(66, new LSTORE_N(3));
        opcodeMap.put(67, new FSTORE_N(0));
        opcodeMap.put(68, new FSTORE_N(1));
        opcodeMap.put(69, new FSTORE_N(2));
        opcodeMap.put(70, new FSTORE_N(3));
        opcodeMap.put(71, new DSTORE_N(0));
        opcodeMap.put(72, new DSTORE_N(1));
        opcodeMap.put(73, new DSTORE_N(2));
//        opcodeMap.put(80, new LASTORE());
//        opcodeMap.put(81, new FASTORE());
//        opcodeMap.put(82, new DASTORE());
        opcodeMap.put(83, new AASTORE());
        opcodeMap.put(84, new BASTORE());
        opcodeMap.put(85, new CASTORE());
//        opcodeMap.put(86, new SASTORE());
        opcodeMap.put(87, new POP());
        opcodeMap.put(88, new POP2());
        opcodeMap.put(89, new DUP());
        opcodeMap.put(96, new IADD());
        opcodeMap.put(97, new LADD());
        opcodeMap.put(98, new FADD());
        opcodeMap.put(99, new DADD());
        opcodeMap.put(100, new ISUB());
//        opcodeMap.put(101, new LSUB());
//        opcodeMap.put(102, new FSUB());
//        opcodeMap.put(103, new DSUB());
        opcodeMap.put(104, new IMUL());
//        opcodeMap.put(105, new LMUL());
        opcodeMap.put(112, new IREM());
//        opcodeMap.put(113, new LREM());
//        opcodeMap.put(114, new FREM());
//        opcodeMap.put(115, new DREM());
        opcodeMap.put(116, new INEG());
//        opcodeMap.put(117, new LNEG());
//        opcodeMap.put(118, new FNEG());
//        opcodeMap.put(119, new DNEG());
        opcodeMap.put(120, new ISHL());
//        opcodeMap.put(121, new LSHL());
//        opcodeMap.put(128, new IOR());
//        opcodeMap.put(129, new LOR());
        opcodeMap.put(130, new IXOR());
//        opcodeMap.put(131, new LXOR());
        opcodeMap.put(132, new IINC());
        opcodeMap.put(133, new I2L());
        opcodeMap.put(134, new I2F());
        opcodeMap.put(135, new I2D());
        opcodeMap.put(136, new L2I());
        opcodeMap.put(137, new L2F());
        opcodeMap.put(144, new D2F());
        opcodeMap.put(145, new I2B());
        opcodeMap.put(146, new I2C());
        opcodeMap.put(147, new I2S());
        opcodeMap.put(148, new LCMP());
        opcodeMap.put(149, new FCMPL());
        opcodeMap.put(150, new FCMPG());
        opcodeMap.put(151, new DCMPL());
        opcodeMap.put(152, new DCMPG());
        opcodeMap.put(153, new IFEQ());
        opcodeMap.put(10, new LCONST_L(1));
        opcodeMap.put(11, new FCONST_F(0));
        opcodeMap.put(12, new FCONST_F(1));
        opcodeMap.put(13, new FCONST_F(2));
        opcodeMap.put(14, new DCONST_D(0));
        opcodeMap.put(15, new DCONST_D(1));
        opcodeMap.put(26, new ILOAD_N(0));
        opcodeMap.put(27, new ILOAD_N(1));
        opcodeMap.put(28, new ILOAD_N(2));
        opcodeMap.put(29, new ILOAD_N(3));
        opcodeMap.put(30, new LLOAD_N(0));
        opcodeMap.put(31, new LLOAD_N(1));
        opcodeMap.put(42, new ALOAD_N(0));
        opcodeMap.put(43, new ALOAD_N(1));
        opcodeMap.put(44, new ALOAD_N(2));
        opcodeMap.put(45, new ALOAD_N(3));
        opcodeMap.put(46, new IALOAD());
//        opcodeMap.put(47, new LALOAD());
        opcodeMap.put(58, new ASTORE());
        opcodeMap.put(59, new ISTORE_N(0));
        opcodeMap.put(60, new ISTORE_N(1));
        opcodeMap.put(61, new ISTORE_N(2));
        opcodeMap.put(62, new ISTORE_N(3));
        opcodeMap.put(63, new LSTORE_N(0));
        opcodeMap.put(74, new DSTORE_N(3));
        opcodeMap.put(75, new ASTORE_N(0));
        opcodeMap.put(76, new ASTORE_N(1));
        opcodeMap.put(77, new ASTORE_N(2));
        opcodeMap.put(78, new ASTORE_N(3));
        opcodeMap.put(79, new IASTORE());
//        opcodeMap.put(90, new DUP_X1());
//        opcodeMap.put(91, new DUP_X2());
//        opcodeMap.put(92, new DUP2());
//        opcodeMap.put(93, new DUP2_X1());
//        opcodeMap.put(94, new DUP2_X2());
//        opcodeMap.put(95, new SWAP());
//        opcodeMap.put(106, new FMUL());
//        opcodeMap.put(107, new DMUL());
        opcodeMap.put(108, new IDIV());
//        opcodeMap.put(109, new LDIV());
//        opcodeMap.put(110, new FDIV());
//        opcodeMap.put(111, new DDIV());
//        opcodeMap.put(122, new ISHR());
//        opcodeMap.put(123, new LSHR());
//        opcodeMap.put(124, new IUSHR());
//        opcodeMap.put(125, new LUSHR());
//        opcodeMap.put(126, new IAND());
//        opcodeMap.put(127, new LAND());
        opcodeMap.put(138, new L2D());
        opcodeMap.put(139, new F2I());
        opcodeMap.put(140, new F2L());
        opcodeMap.put(141, new F2D());
        opcodeMap.put(142, new D2I());
        opcodeMap.put(143, new D2L());
        opcodeMap.put(154, new IFNE());
        opcodeMap.put(155, new IFLT());
        opcodeMap.put(156, new IFGE());
        opcodeMap.put(157, new IFGT());
        opcodeMap.put(158, new IFLE());
        opcodeMap.put(159, new IF_ICMPEQ());
        opcodeMap.put(160, new IF_ICMPNE());
        opcodeMap.put(161, new IF_ICMPLT());
        opcodeMap.put(162, new IF_ICMPGE());
        opcodeMap.put(163, new IF_ICMPGT());
        opcodeMap.put(164, new IF_ICMPLE());
//        opcodeMap.put(165, new IF_ACMPEQ());
//        opcodeMap.put(166, new IF_ACMPNE());
        opcodeMap.put(167, new GOTO());
        opcodeMap.put(172, new IRETURN());
        opcodeMap.put(173, new LRETURN());
        opcodeMap.put(174, new FRETURN());
        opcodeMap.put(175, new DRETURN());
        opcodeMap.put(176, new ARETURN());
        opcodeMap.put(177, new RETURN());
        opcodeMap.put(178, new GETSTATIC());
        opcodeMap.put(179, new PUTSTATIC());
        opcodeMap.put(180, new GETFIELD());
        opcodeMap.put(181, new PUTFIELD());
        opcodeMap.put(182, new INVOKEVIRTUAL());
        opcodeMap.put(183, new INVOKESPECIAL());
        opcodeMap.put(184, new INVOKESTATIC());
        opcodeMap.put(185, new INVOKEINTERFACE());
        opcodeMap.put(187, new NEW());
        opcodeMap.put(188, new NEWARRAY());
        opcodeMap.put(189, new ANEWARRAY());
        opcodeMap.put(190, new ARRAYLENGTH());
        opcodeMap.put(191, new ATHROW());
//        opcodeMap.put(192, new CHECKCAST());
        opcodeMap.put(193, new INSTANCEOF());
        opcodeMap.put(197, new MULTIANEWARRAY());
        opcodeMap.put(198, new IFNULL());
        opcodeMap.put(199, new IFNONNULL());
//        opcodeMap.put(200, new GOTO_W());

    }

    /**
     * 将操作码转化为对应指令对象
     * @param opcode
     */
    public static Instruction decode (Integer opcode) {
        Instruction instruction = opcodeMap.get(opcode);
        if (instruction == null) {
            throw new UnsupportedOperationException("Unsupported instruction " + String.format("0x%08X", opcode));
        }
        return instruction;
    }
}
